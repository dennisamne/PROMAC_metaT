---
title: "The effect of temperature and nutrients in concert on prokaryotic gene expression, figures and tables"
author:
  - name: Dennis Amnebrink
    orcid: 0000-0002-2747-6346
    email: dennis.amnebrink@lnu.se
    affiliations:
      - name: Centre for Ecology and Evolution in Microbial Model Systems – EEMiS, Linnaeus University, Kalmar, Sweden
title-block-banner: true
date: now
editor: visual
toc: true
number-sections: true
format:
  html:
     code-fold: true
     default-image-extension: png
     self-contained: true
---

```{r}
#| label: libraries
#| warning: false

library(tidyverse)
library(kableExtra)
library(vegan)
library(pheatmap)
library(data.table)
library(patchwork)
library(cowplot)
```

```{r}
#| label: constantsedgeR
#| warning: false
SIGNIFICANCE = 0.05
DIFF_TRESHOLD = 0
```

```{r}
#| label: colourscheme treatments
#| warning: false
GEOM_COL_COLOURS = c(
  RColorBrewer::brewer.pal(12, name = 'Paired'))

TREAT_COLOURS <- c("blue","green3","red","yellow4")
```

```{r}
#| label: read_files
#| warning: false
#| cache: true
#Count file for all orfs, tpm is calculated per sample
#Reading in annotations
eggnogs <- read_tsv("../data/eggnog_annotations.tsv.gz")

#Reading in taxonomic annotation of reads
taxonomy <- read_tsv("../data/eukulele_phylodb.tsv") %>%
  select(-species) %>%
  rename(species = "genus", genus = "family", family = "order", order = "class", class = "phylum", phylum = "kingdom")  %>%
  mutate_all(function(x) ifelse(str_detect(x, '_X'), NA, x)) %>% #Removing _X-annotations
  mutate_all(function(x) ifelse(str_detect(x, 'environmental'), NA, x)) %>% # Removing environmental - annotations this is considered the same as NA
  mutate_all(function(x) ifelse(str_detect(x, 'Misc'), NA, x)) %>%
  mutate_all(function(x) ifelse(str_detect(x, 'unclassified'), NA, x))
  
  
#Count file for all orfs, tpm is calculated per sample
bbmap <- fread("../data/bbmap_counts.tsv.gz", sep = "\t") %>%
              filter(count > 0)  %>%                               # removing 0 counts to reduce size of table
              mutate(Geneid = str_replace(Geneid, "[0-9]*_",""),   # Joining in chr and geneid to match format of eggnog naming.
                     orf = paste(Chr,Geneid, sep = "_"),
                     sample = str_extract(sample, "P[0-9]*_[0-9]*")) %>% # Removing extra numbers in sample to match sample_ID format
              dplyr::select(-Geneid,-Chr) %>%
              dplyr::select(orf,Start,End,Strand,Length,sample,count,tpm) 

#kofamscan <- fread("../data2/kofamscan2.tsv.gz", sep = "\t" ) %>%# A few KO-terms have several hits, to remove this issue these are annotated as ambiguous instead, to keep information but remove row duplications
#rename(orf = "gene name",
#       KEGG_ko = "KO",
#       evalue = 6) %>%
#  filter(evalue < 1e-5) %>%
#  group_by(orf) %>%
#  slice_max(order_by = score, n = 1) %>%
 # ungroup() %>%
 # group_by(orf) %>% #This grop_by selects best hit of all KO's based on evalue (only if similar bitscore)
 # slice_min(order_by = evalue, n = 1) %>%
 # ungroup() %>%
 # group_by(orf) %>% #This grop_by selects best hit of all KO's based on treshold (only if similar bitscore)
 # slice(1) %>% # All duplicates are now removed
 # ungroup() %>%
 # select(-1)


#File to connect NGI ID with our own classification ID, add the µ-values to this file for testing later, or do that in a sep file?
sample_ID <- read_tsv("../data/J.Pinhassi_21_02_sample_info.txt") %>%
  dplyr::select(1:2) %>%
  dplyr::rename(sample = 1, sample_name = 2) %>%
  mutate(sample_name = str_replace(sample_name, "[0-9]*:","")) %>%
  separate(sample_name, c("treatment","timepoint"), sep = ",") %>%
  mutate(treatment = gsub("NT","TN", treatment)) %>%
  mutate(sample_name = paste(timepoint, treatment, sep = "_")) %>%
  separate(treatment, c("treatment","replicate"), sep = -1) %>%
  mutate(tre_rep = gsub("_","", sample_name)) %>%
  mutate(tre_rep = toupper(tre_rep)) %>%
  mutate(day = case_when( timepoint == "t3" ~ 10,
                          TRUE ~ 17
                          )
         ) %>%
  as.data.table()

#used to remove some pathways that are covarying due to the same genes present I.e complete nitrification and nitrification. Mehtan oxidation/ammonia oxidation
removeMods <- c("M00173","M00011","M00804","M00174")

module_legend <- read_tsv("../data/module_legend.tsv", col_names = c("KEGG_Module","Entry")) %>%
  filter(!KEGG_Module %in% removeMods)

pathway_key <- read_tsv("../data/new_pathways.tsv") %>%
  rename(KEGG_Pathway = "identifier") %>%
  rbind(c(KEGG_Pathway = "-", pathway = "No entry"))

mesocosm_variables <- read_tsv("../data/Mesocosm_Variables.tsv")

#Reading in contrast file from edgeR-output
contrasts <- read_tsv("../results/edgeR_contrasts.tsv")
```

```{r}
#| label: filtering_prokaryotes
#| cache: true
#| warning: false
#Removing non-prokreads as well as recalculating tpm over prok frac.
bbmap_p <- bbmap %>%
  semi_join(taxonomy %>% filter(domain %in% c("Bacteria","Archaea")), by = "orf") %>%
  dplyr::select(-tpm) %>%
   group_by(sample) %>%
            mutate(t = count/Length) %>%
            mutate(tpm = t/sum(t)*1e6) %>%
   ungroup()
```

## KEGG pathway levels
```{r}
#| label: pathway level 2 summary vectors
#Summarising the larger KEGG categories accordign to their structure in https://www.genome.jp/kegg/pathway.html I did leave out the 1.0 category global and overview maps, as it is so wide, and obscures the rest of the patterns due to high tpm values of uninformative processes

Global_and_overview_maps <- c("01100","01110","01120","01200","01210","01212","01230","01232","01250","01240","01220")

Carbohydrate_metabolism <- c("00010","00020","00030","00040","00051","00052","00053","00500","00520","00620","00630","00640","00650","00660","00562")

Energy_metabolism <- c("00190","00195","00196","00710","00720","00680","00910","00920")

Lipid_metabolism <- c("00061","00062","00071","00072","00073","00100","00120","00121","00140","00561","00564","00565","00600","00590","00591","00592","01040")

Nucleotide_metabolism <- c("00230", "00240") 

Amino_acid_metabolism<- c("00250","00260","00270","00280","00290","00300","00310","00220","00330","00340","00350","00360","00380","00400")

Metabolism_of_other_amino_acids<- c("00410","00430","00440","00450","00460","00471","00472","00473","00480")

Glycan_biosynthesis_and_metabolism <- c("00510","00513","00512","00515","00514","00532","00534","00533","00531","00563","00601","00603","00604","00540","00541","00550","00511","00571","00572")

Metabolism_of_cofactors_and_vitamins<- c("00730","00740","00750","00760","00770","00780","00785","00790","00670","00830","00860","00130")

Metabolism_of_terpenoids_and_polyketides<- c("00900","00902","00909","00904","00906","00905","00981","00908","00903","00281","01052","00522","01051","01059","01056","01057","00253","00523","01054","01053","01055")

Biosynthesis_of_other_secondary_metabolites <- c("00940","00945","00941","00944","00942","00943","00901","00403","00950","00960","01058","00232","00965","00966","00402","00311","00332","00261","00331","00521","00524","00525","00401","00404","00405","00333","00254","00999","00998","00997")

Xenobiotics_biodegradation_and_metabolism <- c("00362","00627","00364","00625","00361","00623","00622","00633","00642","00643","00791","00930","00363","00621","00626","00624","00365","00984","00980","00982","00983")

Chemical_structure_transformation_maps <- c("01010","01060","01061","01062","01063","01064","01065","01066","01070")

Transcription <- 
  c("03020","03022", "03040")

Translation <-
  c("03010","00970","03013","03015","03008")
 
Folding_sorting_and_degradation <-
  c("03060","04141","04130","04120","04122","03050","03018")

Replication_and_repair <- 
  c("03030","03410","03420","03430","03440","03450","03460")

 #This category is removed from the categorie-vector due to no hits at all among the DE-genes
Information_processing_in_viruses <-
   c("03230","03240","03250","03260","03262","03261","03263","03264","03265","03266","03268","03267")
 
 Membrane_transport <-
   c("02010","02060","03070")
 
 Signal_transduction <- 
   c("02020","04010","04013","04016","04011","04012","04014","04015","04310","04330","04340","04341","04350", "04390","04391","04392","04370","04371","04630","04064","04668","04066","04068","04020","04070","04072","04071","04024","04022","04151","04152","04150","04075")
 
 Cellular_community_prokaryotes <-
   c("02024","05111","02025","02026")
 
 Cell_motility <-
   c("02030","02040","04814","04810")
 

categories <- c("Carbohydrate_metabolism", "Energy_metabolism", "Lipid_metabolism", "Nucleotide_metabolism", "Amino_acid_metabolism", "Metabolism_of_other_amino_acids", "Glycan_biosynthesis_and_metabolism", "Metabolism_of_cofactors_and_vitamins", "Metabolism_of_terpenoids_and_polyketides", "Biosynthesis_of_other_secondary_metabolites", "Xenobiotics_biodegradation_and_metabolism", "Chemical_structure_transformation_maps", "Transcription","Translation","Folding_sorting_and_degradation","Replication_and_repair", "Membrane_transport","Signal_transduction","Cellular_community_prokaryotes","Cell_motility")
```

```{r}

#Adding the larger level information
orf_KEGG2_key <- eggnogs %>%
  separate_rows(KEGG_Pathway, sep = ",") %>%
  mutate(KEGG_Pathway = gsub("^[a-z]*", "", KEGG_Pathway)) %>%
  distinct(orf, KEGG_Pathway) %>%
  mutate(KEGG_level_2 = case_when(
    #KEGG_Pathway %in% Global_and_overview_maps ~ "Global_and_overview_maps",
    KEGG_Pathway %in% Carbohydrate_metabolism ~ "Carbohydrate metabolism",
    KEGG_Pathway %in% Energy_metabolism ~ "Energy metabolism",
    KEGG_Pathway %in% Lipid_metabolism ~ "Lipid metabolism",
    KEGG_Pathway %in% Nucleotide_metabolism ~ "Nucleotide metabolism",
    KEGG_Pathway %in% Amino_acid_metabolism ~ "Amino acid metabolism",
    KEGG_Pathway %in% Metabolism_of_other_amino_acids ~ "Metabolism of other amino acids",
    KEGG_Pathway %in% Glycan_biosynthesis_and_metabolism ~ "Glycan biosynthesis and metabolism",
    KEGG_Pathway %in% Metabolism_of_cofactors_and_vitamins ~ "Metabolism of cofactors and vitamins",
    KEGG_Pathway %in% Metabolism_of_terpenoids_and_polyketides ~ "Metabolism of terpenoids and polyketides",
    KEGG_Pathway %in% Biosynthesis_of_other_secondary_metabolites ~ "Biosynthesis of other secondary metabolites",
    KEGG_Pathway %in% Xenobiotics_biodegradation_and_metabolism ~ "Xenobiotics biodegradation and metabolism",
    KEGG_Pathway %in% Chemical_structure_transformation_maps ~ "Chemical structure transformation maps",
    KEGG_Pathway %in% Transcription ~ "Transcription",
    KEGG_Pathway %in% Translation ~ "Translation",
    KEGG_Pathway %in% Folding_sorting_and_degradation ~ "Folding sorting and degradation",
    KEGG_Pathway %in% Replication_and_repair ~ "Replication and repair",
    KEGG_Pathway %in% Information_processing_in_viruses ~ "Information processing in viruses",
    KEGG_Pathway %in% Membrane_transport ~ "Membrane transport",
    KEGG_Pathway %in% Signal_transduction ~ "Signal transduction", #Not adding a last line here gives all PW's not present NA's.
    KEGG_Pathway %in% Cellular_community_prokaryotes ~ "Cellular community prokaryotes",
    KEGG_Pathway %in% Cell_motility ~ "Cell motility"
  ))
```

## Plot IntroVars

```{r}
#| label: IntroVars
#| warning: false

mesocosm_variables %>%
  pivot_longer(cols = 4:9, names_to = "variable", values_to = "value") %>%
  group_by(Day_of_experiment, Treatment, variable) %>%
  summarise(mean_value = mean(value), stdev_value = sd(value)) %>%
  ungroup() %>% 
  mutate(Treatment = as.character(Treatment)) %>%
  filter(!variable %in% c("TDP","TDN")) %>%
  mutate(mean_value = ifelse(grepl("PA|PG", variable), mean_value/1000000, paste0(mean_value)) %>% as.numeric()) %>%
  mutate(stdev_value = ifelse(grepl("PA|PG", variable), stdev_value/1000000, paste0(stdev_value)) %>% as.numeric()) %>%
  mutate(variable = factor(variable,
                           levels = c("Chlorophyll_a","DOC","PA","PG"),
                           labels = c("Chlorophyll~a~(µg~dm^{-3})",
                                      "Dissolved~organic~carbon~(µmol~dm^{-3})",
                                      "Prokaryotic~abundance~(cells~mL^{-1})~x~1000",
                                      "Prokaryotic~growth~(cells~mL^{-1}~d^{-1})~x~1000"
                                      )
                           )) %>%
  ggplot(mapping = aes(x = Day_of_experiment, y= mean_value, colour = Treatment)) +
  geom_point() +
  geom_line() +
  geom_errorbar(aes(ymin = mean_value - stdev_value, ymax = mean_value + stdev_value, width = 0.25)) +
  facet_wrap(~ variable, scales = "free", 
             strip.position = "left",
             labeller = label_parsed
             ) +
  theme_minimal() +
  scale_x_continuous(labels = c(3,6,10,13,17,20,24,27),
                     breaks= c(3,6,10,13,17,20,24,27)) +
  theme(axis.text.y = element_text(size = 7, colour = "black"),
        axis.text.x = element_text(size = 7, colour = "black", face = c("plain","plain","bold","plain","bold","plain","plain","plain")),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold"),
        strip.text = element_text(size = 7, colour = "black", face = "bold"),
        axis.title = element_text(size = 7, colour = "black", face = "bold"),
        axis.line = element_line(size = 0.3, colour = "black", linetype=1),
        strip.placement = "outside"
        ) +
  xlab("Day of experiment") +
  ylab("") +
  scale_colour_manual('Treatment', values = TREAT_COLOURS)

ggsave("../results/mesocosmVariables.png")
ggsave("../results/mesocosmVariables.pdf")
```

## Plot PCA and taxonomy

```{r}
#| cache: true
#| layout-ncol: 2
#| label: fig-PCA_tax
#| fig-cap: PCA and taxonomy of mRNA expression.
#| fig-subcap: 
#|   - "PCA of KEGG_KOs. Numbers denote aplha diversity and standard deviation"
#|   - "Order and higher level taxonomy of reads"
#| warning: false

 # Doing  PCA on KEGG_ko.
orf_mat <- fread("../data/seed_eggNOG_ortholog_orfmat.tsv", sep = "\t") %>%
  column_to_rownames("sample_name") %>%
  as.matrix()

orf_mat_hellinger <- decostand(orf_mat, method = "hellinger") # Hellinger transformation


PCA <- rda(orf_mat_hellinger, distance = "bray") 
  
eigenvalues <- as.data.frame(PCA$CA$eig) %>%
    rownames_to_column("PC_axes") %>%
    rename(eigenvalues = "PCA$CA$eig") %>%
    mutate(eigenvalues_variation_explained = (eigenvalues/sum(eigenvalues) * 100))

   
pca_df <- as.data.frame(PCA$CA$u) %>%
     rownames_to_column("sample_name") %>%
     inner_join(sample_ID, by = "sample_name") %>%
   mutate(Day = case_when(timepoint == "t3" ~ "10",
                               TRUE ~ "17")) 




#So it is possible to add these symbols in gpglot, finally! Now to incorporate it in the geom_label or text
   p1 <- pca_df %>%
     ggplot(mapping = aes(x = PC1, y = PC2, fill = treatment, colour = treatment, shape = Day)) +
     geom_point() +
     xlab(paste("PC1", round(eigenvalues$eigenvalues_variation_explained[1], digits = 2),"%", sep = " ")) +
     ylab(paste("PC2", round(eigenvalues$eigenvalues_variation_explained[2], digits = 2),"%", sep = " ")) +
     geom_polygon(data = pca_df, aes(fill = treatment, colour = treatment), alpha = 0.3, show.legend = FALSE) +
     scale_colour_manual('Treatment',values = TREAT_COLOURS) +
     scale_fill_manual('',values = TREAT_COLOURS) +
     theme_minimal() +
     theme(panel.grid = element_blank(),
           axis.title = element_text(size = 7, face = "bold"),
           axis.text.x = element_text(size = 7, colour = "black"),
           axis.text.y = element_text(size = 7, colour = "black"),
           legend.text = element_text(size = 7),
           legend.title = element_text(size = 7, face = "bold")) +
     geom_vline(xintercept = 0, linetype = "dashed", size = 0.5) +
     geom_hline(yintercept=0, linetype="dashed", size = 0.5) +
     guides(fill = FALSE)
 
###Adding the taxonomy plot
   #Extracting the most abundant order and higher groups
top12 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment, timepoint, orf) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy %>% filter(domain %in% c("Bacteria", "Archaea")), 
            by = "orf") %>%
  mutate(order_coa = coalesce(order, class, phylum)) %>%
  group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm)) %>%
  slice(1:12) %>%
  pull(order_coa)
 
  #Adding one more colour to the scale
GEOM_COL_COLOURS1 = c(GEOM_COL_COLOURS, "#D3D3D3")
 
p2 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  dplyr::select(-tpm) %>%
  group_by(treatment,timepoint) %>%
            mutate(t = count/Length) %>%
            mutate(tpm = t/sum(t)*1e6) %>%
            ungroup() %>%
  inner_join(taxonomy %>% filter(domain %in% c("Bacteria","Archaea")), by = "orf") %>%
  mutate(order_coa = coalesce(order, class, phylum)) %>%
  mutate(Group = ifelse(order_coa %in% top12, paste0(order_coa), "Other")) %>%
  group_by(treatment, timepoint, Group) %>% #Summarising mean tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(Group = fct_recode(Group, P_Thaumarchaeota = "Thaumarchaeota", C_Gammaproteobacteria = "Gammaproteobacteria")) %>%
   mutate(Day = case_when(timepoint == "t3" ~ "10",
                               TRUE ~ "17")) %>%
  ggplot(mapping = aes(x= Day, y = tpm/1000, fill = fct_relevel(Group, "Other", after = 12))) +
  geom_col() +
  facet_wrap(~ treatment) +
  theme(axis.title = element_text(size = 7, face = "bold"),
        axis.text.x = element_text(size = 7, colour = "black"),
        axis.ticks.x = element_blank(),
        legend.position = "bottom",
        strip.background = element_blank(),
        panel.background = element_blank(), 
        strip.text = element_text(size = 7),
        axis.text.y = element_text(size = 7, colour = "black"),
        legend.text = element_text(size = 7)) +
  scale_fill_manual('', values = GEOM_COL_COLOURS1) +
  ylab("Transcripts per million x 1000") +
  xlab("Day") +
  guides(fill=guide_legend(ncol=3)) 

p1 

p2 
```

```{r}
#| label: patchworking
#| eval: false
#| warning: false
#Patchworking the two figure together into a panel

p1 + p2 + plot_annotation() & theme(legend.position = "bottom", 
                                                    legend.key.size = unit(0.2, 'cm'), 
                                                    legend.text = element_text(size=7), 
                                                    legend.title = element_text(size=7))

ggsave("../results/EGGsAndTax_eukulele.png", width = 25, units = "cm")
```

## KEGG pathways and modules

### Pathway categories overview

```{r}
#| cache: true
#| label: fig-pathways
#| fig-cap: Distribution of most abundant KEGG-pathways in the different treatments.
#| warning: false

#Getting the most abundant categories
top12Path <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment, timepoint, orf) %>% # Mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  distinct(KEGG_level_2, orf, tpm) %>% #Getting rid of duplicates due to the removal of prefixes
  group_by(KEGG_level_2) %>%
  summarise(tpm = sum(tpm)) %>% #Summing up the tpm
  ungroup() %>%
  arrange(desc(tpm)) %>%
  filter(!is.na(KEGG_level_2)) %>%
  slice(1:12) %>%
  pull(KEGG_level_2)

#inner_join(orf_KEGG2_key, by = "orf") %>%
#inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf")


bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment, timepoint, orf) %>% # Mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  mutate(Group = ifelse(KEGG_level_2 %in% top12Path, paste0(KEGG_level_2), "Other")) %>%
  filter(Group != "Other") %>%
  group_by(treatment, timepoint, KEGG_level_2) %>% #Summarising sum tpm per timepoint and treatment per pathway
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  inner_join(sample_ID %>% distinct(timepoint, day), by = "timepoint") %>%
  mutate(Day = case_when(timepoint == "t3" ~ "Day 10",
                               TRUE ~ "Day 17")) %>%
  ggplot(mapping = aes(x= KEGG_level_2, y = tpm/1000, fill = treatment)) +
  geom_col(position = "dodge") +
  facet_wrap(~ Day) +
  scale_fill_manual('Treatment', values = TREAT_COLOURS) +
  ylab(bquote('transcripts per million (tpm x'~10^-3~')')) +
  xlab("") +
  coord_flip()+
  theme(strip.background = element_blank(),
        axis.title = element_text(size = 7, face = "bold"),
        axis.text.x = element_text(size = 7, colour = "black"),
        panel.background = element_blank(), 
        strip.text = element_text(size = 7),
        axis.text.y = element_text(size = 7, colour = "black"),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold")
        )

#ggsave("../results/KEGG_pathways.png")
#ggsave("../results/KEGG_pathways.pdf")

p1 <- ggplot2::last_plot()

p1
```

### Modules

```{r}
#| cache: true
#| label: fig-modules
#| fig-cap: Distribution of most abundant KEGG-modules in the different treatments.
#| warning: false
#Getting the most abundant annotated modules 
top12Module <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment,timepoint, orf) %>% # Mean tpm per orf 
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(eggnogs, by = "orf") %>%
  separate_rows(KEGG_Module, sep = ",") %>%
  distinct(KEGG_Module, treatment, timepoint, orf, tpm) %>% #Getting rid of duplicates due to the removal of prefixes
  group_by(KEGG_Module) %>% # Summarising tpm
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(module_legend, by = "KEGG_Module") %>% # Stop to check that all modules have been assigned entries (No NA's)
  arrange(desc(tpm)) %>%
  filter(KEGG_Module != "-") %>%
  filter(is.na(Entry) | Entry != "No entry") %>%
  slice(1:12) %>%
  pull(KEGG_Module)

plot1 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(eggnogs, by = "orf") %>%
  separate_rows(KEGG_Module, sep = ",") %>%
  distinct(KEGG_Module, treatment, timepoint, orf, tpm) %>% #Getting rid of duplicates due to the removal of prefixes
  mutate(Group = ifelse(KEGG_Module %in% top12Module, paste0(KEGG_Module), "Other")) %>%
  filter(Group != "Other") %>%
  inner_join(module_legend, by = "KEGG_Module") %>%
  group_by(treatment, timepoint, Entry) %>% #Summarising sum tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup()

plot1 %>%
  mutate(Day = case_when(timepoint == "t3" ~ "Day 10",
                               TRUE ~ "Day 17")) %>%
  ggplot(mapping = aes(x= Entry, y = tpm/1000, fill = treatment)) +
  geom_col(position = "dodge") +
  facet_wrap(~ Day) +
  scale_fill_manual('Treatment', values = TREAT_COLOURS) +
  ylab(bquote('transcripts per million (tpm x'~10^-3~')')) +
  xlab("") +
  coord_flip() +
  theme(strip.background = element_blank(),
        axis.title = element_text(size = 7, face = "bold"),
        axis.text.x = element_text(size = 7, colour = "black"),
        panel.background = element_blank(), 
        strip.text = element_text(size = 0),
        axis.text.y = element_text(size = 7, colour = "black"),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold")
        )

#ggsave("../results/KEGG_modules.png")
```


```{r}
#ggsave("../results/KEGG_modules.pdf")

p2 <- ggplot2::last_plot()
```

```{r}
#| label: fig-PatchworkPathModu
#| fig-cap: Distribution of most abundant KEGG-modules and pathways in the different treatments.
#| warning: false

  plotsComb <- p1 + theme(legend.position = "none") + ylab("")  + p2 + plot_layout(ncol = 1) + plot_layout(guides = 'collect')

plotsComb
#ggsave("../results/pathModuCombined.png")
ggsave("../results/pathModuCombined.pdf")
```

## Figure contKEGG2

## KEGG2 pathway distribution of expression in each of the contrasts

```{r}

  
# Using the most abundant taxonomic levels 

topOrd <- c("Oceanospirillales","Alteromonadales","Burkholderiales", "Gammaproteobacteria","SAR11 clade","Flavobacteriales","Thaumarchaeota","Rhodobacterales","Pseudomonadales")

top10 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("C")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "NvsC" & type == "Down"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
 group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  arrange(desc(tpm)) %>%
  slice(1:10) %>%
  pull(order_coa)

#NvsC contrast
bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("C")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "NvsC" & type == "Down"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
  mutate(order_coa  = ifelse(order_coa %in% topOrd, paste0(order_coa), paste0("Other"))) %>%
 mutate(KEGG_level_2 = ifelse(KEGG_ko == "ko:K03320", paste0("Ammonium transporter"),paste0(KEGG_level_2))) %>%
  group_by(treatment, timepoint, KEGG_level_2, order_coa) %>% #Summarising sum tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(KEGG_level_2 = forcats::as_factor(KEGG_level_2) %>% fct_reorder(tpm, .fun = "sum" ,.desc = FALSE)) %>%
   mutate(Day = case_when(timepoint == "t3" ~ "day 10",
                               TRUE ~ "day 17")) %>%
  filter(KEGG_level_2 != "NA") %>%
   ggplot(mapping = aes(x=KEGG_level_2, y = tpm, fill = fct_relevel(order_coa, "Other", after = Inf)))  +
  geom_col() +
  theme(axis.text.x = element_text(size = 7), 
        panel.background = element_blank(),
        axis.text.y = element_text(size = 7)) +
  scale_fill_manual('Taxonomy', values = c("Oceanospirillales" = "#FB9A99",
                                           "Alteromonadales" = "#A6CEE3",
                                           "Burkholderiales" = "#1F78B4",
                                           "Gammaproteobacteria" = "#33A02C",
                                           "SAR11 clade" = "#CAB2D6",
                                           "Flavobacteriales" = "#B2DF8A",
                                           "Thaumarchaeota" = "#6A3D9A",
                                           "Rhodobacterales" = "#FF7F00",
                                           "Pseudomonadales" = "#FDBF6F",
                                           "Other" = "#808080")) +
  ylab("transcripts per million") +
  xlab("") +
  coord_flip() +
  theme(strip.background = element_blank()) +
  guides(fill = guide_legend(nrow = 3, byrow = TRUE))

NvsC_CDown <- ggplot2::last_plot()


#####NvsC - N Up

top10 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("N")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "NvsC" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
 group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  arrange(desc(tpm)) %>%
  slice(1:10) %>%
  pull(order_coa)


bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("N")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "NvsC" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
  mutate(order_coa  = ifelse(order_coa %in% topOrd, paste0(order_coa), paste0("Other"))) %>%
 mutate(KEGG_level_2 = ifelse(KEGG_ko == "ko:K03320", paste0("Ammonium transporter"),paste0(KEGG_level_2))) %>%
  group_by(treatment, timepoint, KEGG_level_2, order_coa) %>% #Summarising sum tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(KEGG_level_2 = forcats::as_factor(KEGG_level_2) %>% fct_reorder(tpm, .fun = "sum" ,.desc = FALSE)) %>%
   mutate(Day = case_when(timepoint == "t3" ~ "day 10",
                               TRUE ~ "day 17")) %>%
   filter(KEGG_level_2 != "NA") %>%
   ggplot(mapping = aes(x=KEGG_level_2, y = tpm, fill = fct_relevel(order_coa, "Other", after = Inf)))  +
  geom_col() +
  theme(axis.text.x = element_text(size = 7), 
        panel.background = element_blank(),
        axis.text.y = element_text(size = 7)) +
  scale_fill_manual('Taxonomy', values = c("Oceanospirillales" = "#FB9A99",
                                           "Alteromonadales" = "#A6CEE3",
                                           "Burkholderiales" = "#1F78B4",
                                           "Gammaproteobacteria" = "#33A02C",
                                           "SAR11 clade" = "#CAB2D6",
                                           "Flavobacteriales" = "#B2DF8A",
                                           "Thaumarchaeota" = "#6A3D9A",
                                           "Rhodobacterales" = "#FF7F00",
                                           "Pseudomonadales" = "#FDBF6F",
                                           "Other" = "#808080"), guide = "none") +
  ylab("transcripts per million") +
  xlab("") +
  coord_flip() +
  theme(strip.background = element_blank())

NvsC_NUp <- ggplot2::last_plot()


##########TvsC T Up
top10 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("T")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "TvsC" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
 group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  arrange(desc(tpm)) %>%
  slice(1:10) %>%
  pull(order_coa)


bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("T")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "TvsC" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
  mutate(order_coa  = ifelse(order_coa %in% topOrd, paste0(order_coa), paste0("Other"))) %>%
 mutate(KEGG_level_2 = ifelse(KEGG_ko == "ko:K03320", paste0("Ammonium transporter"),paste0(KEGG_level_2))) %>%
  group_by(treatment, timepoint, KEGG_level_2, order_coa) %>% #Summarising sum tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(KEGG_level_2 = forcats::as_factor(KEGG_level_2) %>% fct_reorder(tpm, .fun = "sum" ,.desc = FALSE)) %>%
   mutate(Day = case_when(timepoint == "t3" ~ "day 10",
                               TRUE ~ "day 17")) %>%
   filter(KEGG_level_2 != "NA") %>%
   ggplot(mapping = aes(x=KEGG_level_2, y = tpm, fill = fct_relevel(order_coa, "Other", after = Inf)))  +
  geom_col() +
  theme(axis.text.x = element_text(size = 7), 
        panel.background = element_blank(),
        axis.text.y = element_text(size = 7)) +
  scale_fill_manual('Taxonomy', values = c("Oceanospirillales" = "#FB9A99",
                                           "Alteromonadales" = "#A6CEE3",
                                           "Burkholderiales" = "#1F78B4",
                                           "Gammaproteobacteria" = "#33A02C",
                                           "SAR11 clade" = "#CAB2D6",
                                           "Flavobacteriales" = "#B2DF8A",
                                           "Thaumarchaeota" = "#6A3D9A",
                                           "Rhodobacterales" = "#FF7F00",
                                           "Pseudomonadales" = "#FDBF6F",
                                           "Other" = "#808080"),guide = "none") +
  ylab("transcripts per million") +
  xlab("") +
  coord_flip() +
  theme(strip.background = element_blank())

TvsC_TUp <- ggplot2::last_plot()



##########TNvsTUp
top10 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("TN")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "TNvsT" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
 group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  arrange(desc(tpm)) %>%
  slice(1:10) %>%
  pull(order_coa)


bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("TN")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key %>% distinct(orf, KEGG_level_2), by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "TNvsT" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
  mutate(order_coa  = ifelse(order_coa %in% topOrd, paste0(order_coa), paste0("Other"))) %>%
  mutate(KEGG_level_2 = ifelse(KEGG_ko == "ko:K03320", paste0("Ammonium transporter"),paste0(KEGG_level_2))) %>%
  group_by(treatment, timepoint, KEGG_level_2, order_coa) %>% #Summarising sum tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(KEGG_level_2 = forcats::as_factor(KEGG_level_2) %>% fct_reorder(tpm, .fun = "sum" ,.desc = FALSE)) %>%
   mutate(Day = case_when(timepoint == "t3" ~ "day 10",
                               TRUE ~ "day 17")) %>%
   filter(KEGG_level_2 != "NA") %>%
   ggplot(mapping = aes(x=KEGG_level_2, y = tpm, fill = fct_relevel(order_coa, "Other", after = Inf)))  +
  geom_col() +
  theme(axis.text.x = element_text(size = 7), 
        panel.background = element_blank(),
        axis.text.y = element_text(size = 7)) +
  scale_fill_manual('Taxonomy', values = c("Oceanospirillales" = "#FB9A99",
                                           "Alteromonadales" = "#A6CEE3",
                                           "Burkholderiales" = "#1F78B4",
                                           "Gammaproteobacteria" = "#33A02C",
                                           "SAR11 clade" = "#CAB2D6",
                                           "Flavobacteriales" = "#B2DF8A",
                                           "Thaumarchaeota" = "#6A3D9A",
                                           "Rhodobacterales" = "#FF7F00",
                                           "Pseudomonadales" = "#FDBF6F",
                                           "Other" = "#808080"), guide = "none") +
  ylab("transcripts per million") +
  xlab("") +
  coord_flip() +
  theme(strip.background = element_blank())

TNvsT_TNUp <- ggplot2::last_plot()
```

## Investigating the Archaeal response in the N-up contrast (Enregy metabolism category)

```{r}

topOrd <- c("Oceanospirillales","Alteromonadales","Burkholderiales", "Gammaproteobacteria","SAR11 clade","Flavobacteriales","Thaumarchaeota","Rhodobacterales","Pseudomonadales")
#####NvsC - N Up

top10 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("N")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key, by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "NvsC" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
 group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  arrange(desc(tpm)) %>%
  slice(1:10) %>%
  pull(order_coa)


bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  semi_join(sample_ID %>% filter(day == '10'), by = 'sample') %>%
  filter(treatment %in% c("N")) %>% #selecting relevant treatments for the plot
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(orf_KEGG2_key, by = "orf") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_ko), by = "orf") %>%
  semi_join(contrasts %>% filter(contrast == "NvsC" & type == "Up"), by = "seed_eggNOG_ortholog") %>% # Relevant enogs
  left_join(taxonomy, by = "orf") %>% #Adding in taxonomic information
  mutate(order_coa = coalesce(order, class, phylum)) %>%
  mutate(order_coa  = ifelse(order_coa %in% topOrd, paste0(order_coa), paste0("Other"))) %>%
 mutate(KEGG_level_2 = ifelse(KEGG_ko == "ko:K03320", paste0("Ammonium transporter"),paste0(KEGG_level_2))) %>%
  filter(KEGG_level_2 == "Energy metabolism") %>%
  filter(order_coa == "Thaumarchaeota") %>%
  distinct(KEGG_Pathway, KEGG_ko)
  
#What shows up is carbon fixation, methane oxidation, nitrogen metabolism, and oxidative phosphorylation

#https://www.genome.jp/dbget-bin/www_bget?ko+K01622+K15019+K00368+K10944+K10945+K00341 - link for KO-terms
```


```{r}
 NvsC_CDown + NvsC_NUp + TvsC_TUp + TNvsT_TNUp + 
  #guides(fill = guide_legend(title.position = "top")) +
  plot_annotation(tag_levels = list(c("C","N","T","TN"))) +
  plot_layout(guides = 'collect') & 
  theme(legend.position = "bottom",
        axis.title.x = element_text(size = 7, colour = "black", face = "bold"),
        axis.text = element_text(size = 7, colour = "black"),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_blank())  
 
ggsave("../results/pathway_level2.pdf")

```

## Fig Contrast taxonomy

```{r}
#Select the 15 most abundant taxa in this case to identify relevant taxa.
bbmap_p %>%
  inner_join(sample_ID %>% filter(day == "10"), by = "sample") %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog), by = "orf") %>%
  inner_join(contrasts %>% filter(contrast == "interaction" & type %in% c("Up","Down")), by = "seed_eggNOG_ortholog") %>%
  inner_join(taxonomy %>% filter(domain %in% c("Bacteria", "Archaea")), by = "orf") %>%
  mutate(taxa_group = coalesce(class, phylum, domain))  %>%
  group_by(type, sample, taxa_group) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(type, treatment, taxa_group) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  mutate(order = fct_reorder(taxa_group, tpm, .fun='sum', .desc = TRUE)) %>%
  filter(order %in% levels(.$order)[1:5]) %>%
   mutate(type = case_when(type == "Up" ~ "Positive",
                          TRUE ~ "Negative"
                          )) %>%
ggplot(mapping = aes(x = order, y = tpm, fill = treatment)) +
  geom_col(position = "dodge") +
  facet_wrap(~ type) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  coord_flip() +
  theme_minimal() +
  theme(axis.text = element_text(size = 7, colour = "black"),
        axis.title = element_text(size = 7, colour = "black", face = "bold"),
        legend.title = element_text(size = 7, colour = "black", face = "bold"),
        legend.text = element_text(size = 7, colour = "black")
        )  +
  scale_fill_manual(values = TREAT_COLOURS) +
  xlab("Taxonomic group") +
  ylab("") +
  ylim(0, 150000)

ggsave("../results/interactionTax.pdf")

interactTax <- ggplot2::last_plot()
```

```{r}
interactArchFunc <- bbmap_p %>%
  inner_join(sample_ID %>% filter(day == "10"), by = "sample") %>%
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog, KEGG_Pathway), by = "orf") %>%
  inner_join(contrasts %>% filter(contrast == "interaction" & type %in% c("Up","Down")), by = "seed_eggNOG_ortholog") %>%
  inner_join(taxonomy %>% filter(phylum %in% c("Thaumarchaeota")), by = "orf") %>%
  separate_rows(KEGG_Pathway, sep = ",") %>%
  mutate(KEGG_Pathway = gsub("[a-z]*","", KEGG_Pathway)) %>%
  distinct(KEGG_Pathway, treatment, timepoint, orf, tpm, type) %>% #Getting rid of duplicates when separating
  group_by(KEGG_Pathway, type, treatment) %>% # Summarising tpm
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(pathway_key, by = "KEGG_Pathway") %>%
  mutate(order = fct_reorder(pathway, tpm, .fun='sum', .desc = TRUE)) %>%
  filter(order %in% levels(.$order)[1:6]) %>%
  mutate(type = case_when(type == "Up" ~ "Positive",
                          TRUE ~ "Negative"
                          )) %>%
ggplot(mapping = aes(x = order, y = tpm, fill = treatment)) +
  geom_col(position = "dodge") +
  facet_wrap(~ type) +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  coord_flip() +
  theme_minimal() +
  theme(axis.text = element_text(size = 7, colour = "black"))  +
  scale_fill_manual(values = TREAT_COLOURS) +
  xlab("KEGG Pathway") +
  ylab("Transcripts per million (Thaumarchaeota)") +
  ylim(0, 150000)
```

```{r}
(interactTax) / (interactArchFunc + plot_spacer()) +
  plot_layout(ncol = 1) + 
  plot_layout(guides = 'collect') &
   theme(legend.position = "bottom",
        axis.title.x = element_text(size = 7, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 7, colour = "black", face = "bold"),
        axis.text = element_text(size = 7, colour = "black"),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold")) 

ggsave("../results/InteractAndArch.pdf")
```

# Tables

## Differential expression overview table
```{r}
#Add percentage of total expression in respective contrast to add up amount of expression
nDEGenes <- contrasts %>%
  group_by(contrast, type) %>%
  tally() %>%
  ungroup() %>%
  spread(contrast, n, fill = 0) %>%
  column_to_rownames("type")

#Calculating expression amount for specific fractions and contrasts
UpTpm <- function(Contrast, Treatment, Type){
 bbmap_p %>%
  inner_join(sample_ID %>% filter(day == "10"), by = "sample") %>%
  group_by(orf, treatment) %>%
  summarise(tpm = mean(tpm), .groups = 'drop') %>%
  ungroup() %>%
  inner_join(eggnogs %>% distinct(orf, seed_eggNOG_ortholog), by = 'orf') %>%
  filter(treatment %in% c(Treatment)) %>%
  inner_join(contrasts %>% filter(contrast == Contrast) %>% select(seed_eggNOG_ortholog, type), by = "seed_eggNOG_ortholog") %>%
  group_by(treatment, type) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  filter(treatment == Treatment & type == Type) %>%
  pull(tpm)

}

percentTable <- matrix(ncol = 4, nrow = 3)
colnames(percentTable) <- c("interaction","NvsC","TNvsT","TvsC")
rownames(percentTable) <- c("Down","non-DE","Up")

percentTable[1,1] <- NA
percentTable[2,1] <- NA
percentTable[3,1] <- NA
percentTable[1,2] <-UpTpm("NvsC","C","Down")
percentTable[2,2] <- NA # Doesn't make sense, which treatment to pick?
percentTable[3,2] <- UpTpm("NvsC","N","Up")
percentTable[1,3] <- UpTpm("TNvsT","T","Down")
percentTable[2,3] <- NA
percentTable[3,3] <- UpTpm("TNvsT","TN","Up")
percentTable[1,4] <- UpTpm("TvsC","C","Down")
percentTable[2,4] <- NA
percentTable[3,4] <- UpTpm("TvsC","T","Up")

#Combine tables 
nDEGenes

combTable <- matrix(ncol = 4, nrow=3)
colnames(combTable) <- c("interaction","NvsC","TNvsT","TvsC")
rownames(combTable) <- c("Down","non-DE","Up")


#Round function to remove decimals for tpm.
for (i in 1:3){
  for(j in 1:4){
    combTable[i,j] <- paste0(nDEGenes[i,j]," (",round(percentTable[i,j]),")")
  }
}
combTable %>%
  as.data.frame() %>%
write_tsv("../results/edgeR_contrast_overview.tsv")
```

## Hypogeometric test table

```{r}
library(piano)
# prerun to get column-names for dataframe in the next code chunk

#selecting only upregulated genes
NvsC_genes <- contrasts %>%
  filter(contrast == "NvsC") %>%
  filter(logFC > 0) %>%
  select(seed_eggNOG_ortholog, fdr) %>% #Selecting postive DE-genes only based on fdr <= 0.05
  filter(fdr <= 0.05) %>%
  pull(seed_eggNOG_ortholog) 
  

#Creating annotation
NvsC_anno <- eggnogs %>%
  semi_join(contrasts %>% filter(contrast == "NvsC") #Filtering out the specific contrast gene-universe
            , by = "seed_eggNOG_ortholog") %>%
  select(seed_eggNOG_ortholog, KEGG_Module) %>%
  separate_rows(KEGG_Module, sep = ",") %>% #Separating the multiple entries per row
  distinct(seed_eggNOG_ortholog, KEGG_Module)  #Removing ko and map prefixes.

#Converting it to the required format by piano. Important that gene names match those in the DE-DF.
NvsCGSC <- loadGSC(NvsC_anno)

#Creating background gene universe based on all genes in the NvsC-treatment
geneVerse <- NvsC_anno %>%
  distinct(seed_eggNOG_ortholog) %>%
  pull(seed_eggNOG_ortholog)


length(unlist(NvsCGSC$gsc))

#Interestingly, after converting the annotation to gsc, the number of genes increase, why??
length(all_genes)

dim(NvsC_anno)

#run the hypergeometric test, genes argument should be vector, 
res <- runGSAhyper(genes=NvsC_genes, universe=geneVerse, gsc=NvsCGSC, gsSizeLim=c(3, 100))

# A table of the modules with lowest p-val
res_table <- res$resTab[order(res$pvalues), ]  # sort by p-value
knitr::kable(res_table)

#Save the significant modules in a table

upMod <- res_table %>%
  as.data.frame() %>%
  rownames_to_column("KEGG_Module") %>%
 # filter(`p-value` <= 0.05) %>%
  mutate(contrast = "NvsC",
         type = "Up")
```



```{r}
#The run that is used, with multiple comparisons

#Creating dataframe for storing all comparisons
fisher_df <- data.frame(matrix(nrow = 0, ncol = length(colnames(upMod)))) 

colnames(fisher_df) <- colnames(upMod)


contrastVec <- contrasts %>% distinct(contrast) %>% pull(contrast)

UpDown <- contrasts %>% filter(type %in% c("Down","Up")) %>% distinct(type) %>% pull(type)

for (i in 1:length(contrastVec)){
for (j in 1:length(UpDown)) {

DE_genes <- contrasts %>%
  filter(contrast == contrastVec[i]) %>%
  filter(fdr <= 0.05) %>%
  filter(type == UpDown[j]) %>% #This is unnecessary due to type info, just use that instead.
  select(seed_eggNOG_ortholog, fdr) %>% #Selecting postive DE-genes only based on fdr <= 0.05
  pull(seed_eggNOG_ortholog) 



#Creating annotation
contrast_anno <- eggnogs %>%
  semi_join(contrasts %>% filter(contrast == contrastVec[i]) #Filtering out the specific contrast gene-universe
            , by = "seed_eggNOG_ortholog") %>%
  select(seed_eggNOG_ortholog, KEGG_Module) %>%
  separate_rows(KEGG_Module, sep = ",") %>% #Separating the multiple entries per row
  distinct(seed_eggNOG_ortholog, KEGG_Module)  #Removing ko and map prefixes.

#Converting it to the required format by piano. Important that gene names match those in the DE-DF.
AnnoGSC <- loadGSC(contrast_anno)

#Creating background gene universe based on all genes in the NvsC-treatment
geneVerse <- contrast_anno %>%
  distinct(seed_eggNOG_ortholog) %>%
  pull(seed_eggNOG_ortholog)


#run the hypergeometric test, genes argument should be vector, 
res <- runGSAhyper(genes=DE_genes, universe=geneVerse, gsc=AnnoGSC, gsSizeLim=c(3, 100))

# A table of the modules with lowest p-val
res_table <- res$resTab[order(res$pvalues), ]  # sort by p-value

#Appending results to fisher-df
fisher_df <- rbind(
  fisher_df,
  res_table %>%
  as.data.frame() %>%
  rownames_to_column("KEGG_Module") %>%
 # filter(`Adjusted p-value` <= 0.05) %>%
  mutate(contrast = contrastVec[i],
         type = UpDown[j])
)

  }
}

#fisher_df %>%
 # select(-`Adjusted p-value`) %>% # Removing old fdr as it it only calculated for each contrast, not full error-wise control
 # mutate(fdr = p.adjust(`p-value`, method = "fdr")) %>% #Adding a more correct error-correction as it is done on all p-vals.
 # write_tsv("../data/fisher_contrast_df.tsv")
```


# Supplementary

## Nested taxonomy plots
```{r}
#### Burkholderiales
top12 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(timepoint, treatment, orf) %>% # mean tpm per orf and treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(order == "Burkholderiales") %>%
  mutate(order_coa = coalesce(species, genus, family, order)) %>% #Filling from genus and upwards
  group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm)) %>%
  slice(1:11) %>%
  pull(order_coa)

p1 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment,timepoint,orf) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(order == "Burkholderiales") %>%
  mutate(order_coa = coalesce(species, genus, family, order)) %>%
  mutate(Group = ifelse(order_coa %in% top12, paste0(order_coa), "Other")) %>%
  mutate(Group = case_when(Group %in% species ~ paste0("s_",Group),
                                         Group %in% genus ~ paste0("g_",Group),
                                         Group %in% family ~ paste0("f_",Group),
                                         Group %in% order ~ paste0("o_",Group),
                                         TRUE ~ Group)) %>%
  group_by(treatment, timepoint, Group) %>% #Summarising mean tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  group_by(treatment, timepoint) %>%
  mutate(relab = tpm/sum(tpm)) %>%  #Making the abundance relative within the group for comparisons
  ungroup() %>%
  mutate(Day = case_when(timepoint == "t3" ~ "10",
                               TRUE ~ "17")) %>%
  ggplot(mapping = aes(x= Day, y = relab, fill = fct_relevel(Group, "Other", after = 12))) +
  geom_col() +
  facet_wrap(~ treatment) +
  theme(axis.text.x = element_text(size = 7, colour = "black"),
        axis.title.x = element_text(size = 7, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 7, colour = "black"),
        axis.title.y = element_text(size = 7, colour = "black", face = "bold"),
        panel.background = element_blank(),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold"),
        strip.text = element_text(size = 7, colour = "black", face = "bold"),
        strip.background = element_blank()) +
  scale_fill_manual('Taxonomic group', values = GEOM_COL_COLOURS) +
  ylab("Relative abundance") +
  xlab("Day")

####### Thaumarchaeaota

top12 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(timepoint, treatment, orf) %>% # mean tpm per orf and treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(phylum == "Thaumarchaeota") %>%
  mutate(order_coa = coalesce(genus, family, order, class, phylum)) %>% #Filling from genus and upwards
  group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm)) %>%
  slice(1:11) %>%
  pull(order_coa)

p2 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment,timepoint,orf) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(phylum == "Thaumarchaeota") %>%
  mutate(order_coa = coalesce(genus, family, order, class, phylum)) %>%
  mutate(Group = ifelse(order_coa %in% top12, paste0(order_coa), "Other")) %>%
  mutate(Group = case_when(Group %in% genus ~ paste0("g_",Group),
                                         Group %in% family ~ paste0("f_",Group),
                                         Group %in% order ~ paste0("o_",Group),
                                         Group %in% class ~ paste0("c_",Group),
                                         Group %in% phylum ~ paste0("p_",Group),
                                         TRUE ~ Group)) %>%
  group_by(treatment, timepoint, Group) %>% #Summarising mean tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  group_by(treatment, timepoint) %>%
  mutate(relab = tpm/sum(tpm)) %>%  #Making the abundance relative within the group for comparisons
  ungroup() %>%
  mutate(Day = case_when(timepoint == "t3" ~ "10",
                               TRUE ~ "17")) %>%
  #mutate(Group = fct_recode(Group, P_Thaumarchaeota = "Thaumarchaeota", C_Gammaproteobacteria = "Gammaproteobacteria")) %>%
  ggplot(mapping = aes(x= Day, y = relab, fill = fct_relevel(Group, "Other", after = 12))) +
  geom_col() +
  facet_wrap(~ treatment) +
  theme(axis.text.x = element_text(size = 7, colour = "black"),
        axis.title.x = element_text(size = 7, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 7, colour = "black"),
        axis.title.y = element_text(size = 7, colour = "black", face = "bold"),
        panel.background = element_blank(),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold"),
        strip.text = element_text(size = 7, colour = "black", face = "bold"),
        strip.background = element_blank()) +
  scale_fill_manual('Taxonomic group', values = GEOM_COL_COLOURS) +
  ylab("Relative abundance") +
  xlab("Day")


######### Oceranospirillales
top12 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(timepoint, treatment, orf) %>% # mean tpm per orf and treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(order == "Oceanospirillales") %>%
  mutate(order_coa = coalesce(species, genus, family, order)) %>% #Filling from genus and upwards
  group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm)) %>%
  slice(1:11) %>%
  pull(order_coa)

p3 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment,timepoint,orf) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(order == "Oceanospirillales") %>%
  mutate(order_coa = coalesce(species, genus, family, order)) %>%
  mutate(Group = ifelse(order_coa %in% top12, paste0(order_coa), "Other")) %>%
  mutate(Group = case_when(Group %in% species ~ paste0("s_",Group),
                                         Group %in% genus ~ paste0("g_",Group),
                                         Group %in% family ~ paste0("f_",Group),
                                         Group %in% order ~ paste0("o_",Group),
                                         TRUE ~ Group)) %>%
  group_by(treatment, timepoint, Group) %>% #Summarising mean tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  group_by(treatment, timepoint) %>%
  mutate(relab = tpm/sum(tpm)) %>%  #Making the abundance relative within the group for comparisons
  ungroup() %>%
  mutate(Day = case_when(timepoint == "t3" ~ "10",
                               TRUE ~ "17")) %>%
  ggplot(mapping = aes(x= Day, y = relab, fill = fct_relevel(Group, "Other", after = 12))) +
  geom_col() +
  facet_wrap(~ treatment) +
  theme(axis.text.x = element_text(size = 7, colour = "black"),
        axis.title.x = element_text(size = 7, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 7, colour = "black"),
        axis.title.y = element_text(size = 7, colour = "black", face = "bold"),
        panel.background = element_blank(),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold"),
        strip.text = element_text(size = 7, colour = "black", face = "bold"),
        strip.background = element_blank()) +
  scale_fill_manual('Taxonomic group', values = GEOM_COL_COLOURS) +
  ylab("Relative abundance") +
  xlab("Day")


######### Alteromonadales
top12 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(timepoint, treatment, orf) %>% # mean tpm per orf and treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(order == "Alteromonadales") %>%
  mutate(order_coa = coalesce(species, genus, family, order)) %>% #Filling from genus and upwards
  group_by(order_coa) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm)) %>%
  slice(1:11) %>%
  pull(order_coa)

p4 <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment,timepoint,orf) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(taxonomy, by= "orf") %>%
  filter(order == "Alteromonadales") %>%
  mutate(order_coa = coalesce(species, genus, family, order)) %>%
  mutate(Group = ifelse(order_coa %in% top12, paste0(order_coa), "Other")) %>%
  mutate(Group = case_when(Group %in% species ~ paste0("s_",Group),
                                         Group %in% genus ~ paste0("g_",Group),
                                         Group %in% family ~ paste0("f_",Group),
                                         Group %in% order ~ paste0("o_",Group),
                                         TRUE ~ Group)) %>%
  group_by(treatment, timepoint, Group) %>% #Summarising mean tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  group_by(treatment, timepoint) %>%
  mutate(relab = tpm/sum(tpm)) %>%  #Making the abundance relative within the group for comparisons
  ungroup() %>%
  mutate(Day = case_when(timepoint == "t3" ~ "10",
                               TRUE ~ "17")) %>%
  ggplot(mapping = aes(x= Day, y = relab, fill = fct_relevel(Group, "Other", after = 12))) +
  geom_col() +
  facet_wrap(~ treatment) +
  theme(axis.text.x = element_text(size = 7, colour = "black"),
        axis.title.x = element_text(size = 7, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 7, colour = "black"),
        axis.title.y = element_text(size = 7, colour = "black", face = "bold"),
        panel.background = element_blank(),
        legend.text = element_text(size = 7, colour = "black"),
        legend.title = element_text(size = 7, colour = "black", face = "bold"),
        strip.text = element_text(size = 7, colour = "black", face = "bold"),
        strip.background = element_blank()) +
  scale_fill_manual('Taxonomic group', values = GEOM_COL_COLOURS) +
  ylab("Relative abundance") +
  xlab("Day")

```

```{r}
 p_combined <- p1 + p2 + p3 + p4

ggsave("../results/nested_taxonomies.png", plot = p_combined, height = 20, width = 35, units = "cm")
```


## Table contrasts
This is the file produced by edgeR-output already loaded "contrasts"

## Table Orf-richness
```{r}
bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment, orf) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  filter(tpm > 0) %>% #Removing zero counts in treatments
  group_by(treatment) %>%
  tally() %>%
  ungroup() %>%
  write_tsv("../results/orf_richness.tsv")
```

## Table PERMANOVA
```{r}
#Creating the matrix based on eggNOGs
orf_mat <- bbmap_p %>%
  inner_join(eggnogs, by = "orf") %>% #6674350 rows
  inner_join(sample_ID, by = "sample") %>%
  select(seed_eggNOG_ortholog, tpm, sample_name) %>%
  group_by(sample_name, seed_eggNOG_ortholog) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  spread(seed_eggNOG_ortholog, tpm, fill = 0) %>%
  column_to_rownames("sample_name") %>%
  as.matrix() 

#Creating dataframe with metadata (temp and nutrient)
orf_mat.env <- orf_mat %>% 
  as.data.frame() %>%
  rownames_to_column("sample_name") %>%
  select(sample_name) %>%
  inner_join(sample_ID, by = "sample_name") %>%
  select(sample_name, treatment) %>%
  column_to_rownames("sample_name")

#Running the adonis with temp and nutrrient variables to separate temperature and nutrients for the 2x2 design
orf_mat.env.dummy <- orf_mat.env %>%
  mutate(temp = ifelse(
    grepl("T", treatment),
    10,1)) %>%
    mutate(nutrients = ifelse(
      grepl("N", treatment),
    1,0),
    )

permanova <- adonis2(decostand(orf_mat, method = "hellinger") ~ nutrients*temp, data = orf_mat.env.dummy)

# Both are significant, and interaction effect occurs, this is seen regardless of which term is placed first in the sequential setup. But why does this not produce an interaction effect while margin is set instead of sequential??? Regardless of hellinger or not the setup is significant.

bdisp <- betadisper(vegdist(decostand(orf_mat, method ="hellinger"), method = "bray"), as.factor(orf_mat.env.dummy$treatment), type = "median")


anova(bdisp)

#Looking at the bdisp it looks well defined, and groups very separated. 
pdf("../results/betadisp_taxonomy.pdf")
plot(bdisp)
dev.off()

#Running the betadisper and permutations, the homogeneity of multivariate dispersions is significant, both with and without hellinger, how to deal with this??? Disp looks acceptable with hellinger though, so use that.

#Correcting the multiple p-values with fdr-correction.
as.data.frame(permanova) %>%
  rename(p_value = 5) %>%
  rownames_to_column("factors") %>%
  mutate(fdr = p.adjust(p_value, method = "bonferroni")) %>%
  write_tsv("../results/permanova_taxonomy.tsv")
```

## Table eggnog-taxonomy
```{r}
eggnogs %>%
  left_join(taxonomy, by = "orf") %>%
  write_tsv("../results/orf_taxonomy.tsv")
```



# Temporary investigation of the fucky N-cycle
```{r}

#Relevant N-pathways are:
#Nitrification, ammonia => nitrite - M00528
#Denitrification, nitrate => nitrogen - M00529
#Complete nitrification, comammox, ammonia => nitrite => nitrate - M00804
#Methane oxidation, methanotroph, methane => formaldehyde - M00174

mets <- c("M00528","M00529","M00804","M00174")

#figure out how to do this
 #To tease apart the genes in each module, this reference is perfect.
 #https://www.genome.jp/pathway/map00910

#Nitrification, ammonia => nitrite (Hao, amoABC)

#Denitrification, nitrate => nitrogen (NarGHI, NapAB) (NirK, NirS) (NorBC) (NosZ)

#Complete nitrification, comammox, ammonia => nitrite => nitrate (hao, narG, narZ, nxrA, pmoA-amoA)

# So the overlaps are as such:

  #Hao is in both Nirrification and complete nitrification.
  # the NarG is overlapping in Denitrification and complete nitrification
  # amoA overlap in complete nitrification and nitrification
  # Methane oxidation overlap in pmoA-amoA (exclude this one based on tree)

#Removing:
#Methane oxidation - M00174
#Complete nitrification - M00804

```
# Resolving the stupid amoa/pmoa issue by identifying sequencing to place into fucking tree
```{r}
top12Module <- bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  group_by(treatment,timepoint, orf) %>% # Mean tpm per orf 
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  inner_join(eggnogs, by = "orf") %>%
  separate_rows(KEGG_Module, sep = ",") %>%
  distinct(KEGG_Module, treatment, timepoint, orf, tpm) %>% #Getting rid of duplicates due to the removal of prefixes
  group_by(KEGG_Module) %>% # Summarising tpm
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(module_legend, by = "KEGG_Module") %>% # Stop to check that all modules have been assigned entries (No NA's)
  arrange(desc(tpm)) %>%
  filter(KEGG_Module != "-") %>%
  filter(is.na(Entry) | Entry != "No entry") %>%
  slice(1:12) %>%
  pull(KEGG_Module)

bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  filter(timepoint == "t3") %>%
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(eggnogs, by = "orf") %>%
  separate_rows(KEGG_Module, sep = ",") %>%
  distinct(KEGG_Module, treatment, timepoint, orf, tpm) %>% #Getting rid of duplicates due to the removal of prefixes
  inner_join(module_legend, by = "KEGG_Module") %>%
  filter(KEGG_Module %in% mets) %>%
  group_by(treatment, timepoint, Entry, orf) %>% #Summarising sum tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  group_by(Entry, treatment, timepoint) %>%
  slice_max(order_by = tpm, n = 5) %>%
  ungroup() %>%
  mutate(orf = forcats::as_factor(orf) %>% fct_reorder(tpm, .fun = "sum", .desc = TRUE)) %>%
  ggplot(mapping=aes(x = orf, y = tpm, fill = treatment)) +
  geom_col(position = "dodge") +
  facet_wrap(~ Entry) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Following this plot., the methane oxidation, nitrification and complete nitrification is caused by four orfs shared between all, these are: 
placement_vec <- c("K141_231770_1", "K141_269524_3", "K141_1311162_1", "k141_557893_3") # First three sequences are subunit C of amo/pmo, the last is just considered ammonia monooxygenase subunit A. All sequences are of archaeal origin.

# All sequences are of nitrosopumilus, which are not capabe of CH4, thus we conclude they are nitrifiers, remove other categories from the list 

# Next up is the Reductive citrate cycle (Arnon-Buchanan cycle) which overlaps with Citrace cycle, and Citrate cyce 2nd carbon oxidation. Perhaps the second carbon oxidation step is shared among the other two metabolic categories as well...

# M00173 - Reductive citrate cycle (Arnon-Buchanan cycle)
# M00011 - Citrate cycle, second carbon oxidation, 2-oxoglutarate => oxaloacetate
# M00009 - Citrate cycle (TCA cycle, Krebs cycle)

mets <- c("M00173","M00011","M00009")

bbmap_p %>%
  inner_join(sample_ID, by = "sample") %>%
  filter(timepoint == "t3") %>%
  group_by(orf, treatment,timepoint) %>% # Summarising mean tpm per orf per treatment and timepoint
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%       
  inner_join(eggnogs, by = "orf") %>%
  separate_rows(KEGG_Module, sep = ",") %>%
  distinct(KEGG_Module, treatment, timepoint, orf, tpm) %>% #Getting rid of duplicates due to the removal of prefixes
  inner_join(module_legend, by = "KEGG_Module") %>%
  filter(KEGG_Module %in% mets) %>%
  group_by(treatment, timepoint, Entry, orf) %>% #Summarising sum tpm per timepoint and treatment per group
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  group_by(Entry, treatment, timepoint) %>%
  slice_max(order_by = tpm, n = 5) %>%
  ungroup() %>%
  mutate(orf = forcats::as_factor(orf) %>% fct_reorder(tpm, .fun = "sum", .desc = TRUE)) %>%
  ggplot(mapping=aes(x = orf, y = tpm, fill = treatment)) +
  geom_col(position = "dodge") +
  facet_wrap(~ Entry) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
# It appears that is is the same orfs in all modules again, there will be put into vector (see below)
# Orfs:
secCarOx <- c("k141_317403_3","k141_954206_34","k141_317403_11","k141_317403_4","k141_317403_9","k141_317403_8","k141_435960_31","k141_749944_1","k141_1240120_51","k141_501837_1","k141_1312786_1")


#Since the modules are all encode by the same genes, and it is in the second step, it should be decided which one to use, reasonably that is the TCA-cycle in this case. Note that glyoxylate cycle does not overlap.

#Modules to remove:

removeMods <- c("M00173","M00011","M00804","M00174")
```

